"use strict";(self.webpackChunkmaze_generator=self.webpackChunkmaze_generator||[]).push([[792],{320:(e,t,a)=>{class n{constructor(e,t){this.x=e,this.y=t,this.visited=!1,this.blocked=!1,this.walls=[!0,!0,!0,!0],this.color="#e0e5ec"}draw(e,t){const a=this.x*t,n=this.y*t;e.fillStyle=this.color,e.fillRect(a,n,t,t),e.strokeStyle="#2d3436",e.lineWidth=2,this.walls[0]&&this.drawLine(e,a,n,a+t,n),this.walls[1]&&this.drawLine(e,a+t,n,a+t,n+t),this.walls[2]&&this.drawLine(e,a+t,n+t,a,n+t),this.walls[3]&&this.drawLine(e,a,n+t,a,n)}drawLine(e,t,a,n,i){e.beginPath(),e.moveTo(t,a),e.lineTo(n,i),e.stroke()}removeWallBetween(e){const t=e.x-this.x,a=e.y-this.y;1===t?(this.walls[1]=!1,e.walls[3]=!1):-1===t?(this.walls[3]=!1,e.walls[1]=!1):1===a?(this.walls[2]=!1,e.walls[0]=!1):-1===a&&(this.walls[0]=!1,e.walls[2]=!1)}}const i={defaultCols:25,defaultRows:25,minSize:10,maxSize:50,defaultSpeed:5,minSpeed:1,maxSpeed:20,defaultStartArea:{x:0,y:0,w:3,h:3},defaultCheckpointArea:{x:10,y:10,w:6,h:6},defaultFinishArea:{x:22,y:22,w:3,h:3},randomization:{minBranches:30,maxBranches:45,minDistance:3,edgeChangeProb:95,changeProb:85},colors:{background:"#ffffff",primary:"#6c5ce7",secondary:"#00b894",accent:"#fdcb6e",text:"#2d3436"}};class s{constructor(e){this.canvas=e,this.ctx=e.getContext("2d"),this.cols=i.defaultCols,this.rows=i.defaultRows,this.cellSize=e.width/this.cols,this.grid=[],this.stack=[],this.isGenerating=!1,this.generationTimeout=null,this.activeGrowthCount=0,this.largeAreas=[i.defaultStartArea,i.defaultCheckpointArea,i.defaultFinishArea]}initialize(){this.grid=[];for(let e=0;e<this.rows;e++)for(let t=0;t<this.cols;t++)this.grid.push(new n(t,e))}getCell(e,t){const a=e+t*this.cols;return e<0||t<0||e>=this.cols||t>=this.rows?null:this.grid[a]}markBlockedAreas(){this.largeAreas.forEach((e=>{for(let t=0;t<e.h;t++)for(let a=0;a<e.w;a++){const n=this.getCell(e.x+a,e.y+t);n&&(n.visited=!0,n.color=i.colors.background,a>0&&(n.walls[3]=!1),a<e.w-1&&(n.walls[1]=!1),t>0&&(n.walls[0]=!1),t<e.h-1&&(n.walls[2]=!1),n.blocked=0===a||a===e.w-1||0===t||t===e.h-1)}}))}createMainPath(){if(this.largeAreas.length<2){const e={x:0,y:0},t={x:this.cols-1,y:this.rows-1},a=this.generateRandomMidPoint(e,t),n=this.generateRandomMidPoint(a,t),i=this.generateRandomMidPoint(n,t);this.generatePathWithMidPoint(e,t,a,n,i)}else for(let e=0;e<this.largeAreas.length-1;e++){const t=this.largeAreas[e],a=this.largeAreas[e+1],n={x:t.x+t.w-1,y:t.y+t.h-1},i={x:a.x,y:a.y},s=this.generateRandomMidPoint(n,i),o=this.generateRandomMidPoint(s,i),l=this.generateRandomMidPoint(o,i);this.generatePathWithMidPoint(n,i,s,o,l)}}generateRandomMidPoint(e,t){const a=t.x-e.x,n=t.y-e.y,i=.3+.4*Math.random();let s=Math.floor(e.x+a*i),o=Math.floor(e.y+n*i);s=Math.max(1,Math.min(s,this.cols-2)),o=Math.max(1,Math.min(o,this.rows-2));const l=Math.floor(3*Math.random())-1;s+=l,o+=l;const r=Math.abs(s-t.x)+Math.abs(o-t.y),h=Math.abs(s-e.x)+Math.abs(o-e.y);return(r<3||h<3)&&(s=Math.floor(e.x+a*(i+.1)),o=Math.floor(e.y+n*(i+.1))),this.largeAreas.some((e=>s>=e.x&&s<e.x+e.w&&o>=e.y&&o<e.y+e.h))&&(s=Math.max(1,Math.min(s,this.cols-2)),o=Math.max(1,Math.min(o,this.rows-2))),{x:s,y:o}}generatePathWithMidPoint(e,t,...a){if(a.length>1){this.generatePathSegment(e,a[0]);for(let e=0;e<a.length-1;e++)this.generatePathSegment(a[e],a[e+1]);this.generatePathSegment(a[a.length-1],t)}else 1===a.length?(this.generatePathSegment(e,a[0]),this.generatePathSegment(a[0],t)):this.generatePathSegment(e,t)}generatePathSegment(e,t){let a=e.x,n=e.y;const s=new Set;s.add(`${a},${n}`);const o=this.getCell(e.x,e.y);for(o&&(o.visited=!0,o.color=i.colors.secondary);a!==t.x||n!==t.y;){const e=this.getCell(a,n);if(!e)break;const o=t.x-a,l=t.y-n;if(1===Math.abs(o)&&0===l||1===Math.abs(l)&&0===o){const o=this.getCell(t.x,t.y);if(o){e.removeWallBetween(o),a=t.x,n=t.y,s.add(`${a},${n}`),o.visited=!0,o.color=i.colors.secondary;continue}}const r=[];if(a<t.x&&!s.has(`${a+1},${n}`)){const e=this.getCell(a+1,n);e&&!e.blocked&&r.push({dx:1,dy:0})}if(a>t.x&&!s.has(`${a-1},${n}`)){const e=this.getCell(a-1,n);e&&!e.blocked&&r.push({dx:-1,dy:0})}if(n<t.y&&!s.has(`${a},${n+1}`)){const e=this.getCell(a,n+1);e&&!e.blocked&&r.push({dx:0,dy:1})}if(n>t.y&&!s.has(`${a},${n-1}`)){const e=this.getCell(a,n-1);e&&!e.blocked&&r.push({dx:0,dy:-1})}if(0===r.length){const o=this.getUnvisitedNeighbors(e);if(o.length>0){const l=o.reduce(((e,a)=>{const n=Math.abs(t.x-e.cell.x)+Math.abs(t.y-e.cell.y);return Math.abs(t.x-a.cell.x)+Math.abs(t.y-a.cell.y)<n?a:e}));e.removeWallBetween(l.cell),a=l.cell.x,n=l.cell.y,s.add(`${a},${n}`),l.cell.visited=!0,l.cell.color=i.colors.secondary;continue}console.log("No alternative path found");break}const h=r.reduce(((e,i)=>{const s=Math.abs(t.x-(a+e.dx))+Math.abs(t.y-(n+e.dy));return Math.abs(t.x-(a+i.dx))+Math.abs(t.y-(n+i.dy))<s?i:e})),d=this.getCell(a+h.dx,n+h.dy);if(!d){console.log("Cannot move to next cell");break}e.removeWallBetween(d),a+=h.dx,n+=h.dy,s.add(`${a},${n}`),d.visited=!0,d.color=i.colors.secondary}const l=this.getCell(t.x,t.y);l&&(l.visited=!0,l.color=i.colors.secondary)}getUnvisitedNeighbors(e){const t=[{dx:0,dy:-1,dir:0},{dx:1,dy:0,dir:1},{dx:0,dy:1,dir:2},{dx:-1,dy:0,dir:3}],a=[];return t.forEach((({dx:n,dy:i,dir:s})=>{const o=e.x+n,l=e.y+i,r=this.getCell(o,l);!r||r.visited||r.blocked||(!t.some((({dx:t,dy:a})=>{const n=o+t,i=l+a,s=this.getCell(n,i);return s&&s.visited&&s!==e}))||Math.random()<.3)&&a.push({cell:r,dir:s})})),a}generateMazeStep(e){if(!this.isGenerating)return;e.visited=!0,e.color=i.colors.primary;const t=this.getUnvisitedNeighbors(e);if(t.length>0){const a=this.stack.length>0?{dx:e.x-this.stack[this.stack.length-1].x,dy:e.y-this.stack[this.stack.length-1].y}:null;let n;if(a&&this.stack.length>2){const s=e.x<=1||e.x>=this.cols-2||e.y<=1||e.y>=this.rows-2,o=s?i.randomization.edgeChangeProb/100:i.randomization.changeProb/100;if(Math.random()<o){const i=t.filter((({cell:t})=>{const n=t.x-e.x,i=t.y-e.y;if(s){if(e.x<=1&&n<=0)return!1;if(e.x>=this.cols-2&&n>=0)return!1;if(e.y<=1&&i<=0)return!1;if(e.y>=this.rows-2&&i>=0)return!1}return n!==a.dx&&i!==a.dy}));if(i.length>0)n=i[Math.floor(Math.random()*i.length)];else{const a=t.filter((({cell:t})=>e.x<=1?t.x>e.x:e.x>=this.cols-2?t.x<e.x:e.y<=1?t.y>e.y:!(e.y>=this.rows-2)||t.y<e.y));n=a.length>0?a[Math.floor(Math.random()*a.length)]:t[Math.floor(Math.random()*t.length)]}}else n=t[Math.floor(Math.random()*t.length)]}else n=t[Math.floor(Math.random()*t.length)];e.removeWallBetween(n.cell),this.stack.push(e),this.draw();const s=parseInt(document.getElementById("generationSpeed").value);this.generationTimeout=setTimeout((()=>this.generateMazeStep(n.cell)),s)}else if(this.stack.length>0){const e=this.stack.pop();this.draw();const t=parseInt(document.getElementById("generationSpeed").value);this.generationTimeout=setTimeout((()=>this.generateMazeStep(e)),t)}else this.activeGrowthCount--,0===this.activeGrowthCount&&(this.generationTimeout=setTimeout((()=>this.finalizeMaze()),500))}getMainPathCells(){return this.grid.filter((e=>e.color===i.colors.secondary))}getBranchingPoints(){const e=this.getMainPathCells(),t=[];return e.forEach((e=>{this.getUnvisitedNeighbors(e).length>=1&&Math.random()<.6&&t.push(e)})),t}generateBranchFromPoint(e){const t=this.getUnvisitedNeighbors(e);if(t.length>0){const{cell:a}=t[Math.floor(Math.random()*t.length)];return e.removeWallBetween(a),a.visited=!0,a.color=i.colors.primary,a}return null}generateBranches(){const e=this.getBranchingPoints();if(0===e.length)return;const t=Math.floor(Math.random()*(i.randomization.maxBranches-i.randomization.minBranches+1))+i.randomization.minBranches,a=[];for(let n=0;n<Math.min(t,e.length);n++){let t=0,n=!1;for(;!n&&t<10;){const s=Math.floor(Math.random()*e.length),o=e[s];a.some((e=>Math.abs(o.x-e.x)+Math.abs(o.y-e.y)<i.randomization.minDistance))||(a.push(o),e.splice(s,1),n=!0),t++}}a.forEach((e=>{const t=this.generateBranchFromPoint(e);t&&(this.activeGrowthCount++,this.generateMazeStep(t))}))}openUnvisitedCells(){this.grid.filter((e=>!e.visited&&!e.blocked)).sort((()=>Math.random()-.5)).forEach((e=>{if(e.visited)return;const t=[{dx:0,dy:-1,dir:0,wallIndex:0},{dx:1,dy:0,dir:1,wallIndex:1},{dx:0,dy:1,dir:2,wallIndex:2},{dx:-1,dy:0,dir:3,wallIndex:3}].sort((()=>Math.random()-.5));for(const{dx:a,dy:n,wallIndex:s}of t){const t=e.x+a,o=e.y+n,l=this.getCell(t,o);if(l&&!l.blocked&&l.color!==i.colors.secondary&&!this.largeAreas.some((e=>t>=e.x&&t<e.x+e.w&&o>=e.y&&o<e.y+e.h))){e.walls[s]=!1,l.walls[(s+2)%4]=!1,e.visited=!0,l.visited=!0,e.color=i.colors.accent,l.color=i.colors.accent;break}}})),this.draw()}finalizeMaze(){this.openUnvisitedCells(),setTimeout((()=>{this.grid.forEach((e=>{e.color=i.colors.background})),this.draw()}),2e3)}draw(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.grid.forEach((e=>e.draw(this.ctx,this.cellSize)))}startBranching(){this.isGenerating&&(0===this.activeGrowthCount?(this.generateBranches(),0===this.activeGrowthCount?this.generationTimeout=setTimeout((()=>this.finalizeMaze()),500):this.generationTimeout=setTimeout((()=>this.startBranching()),50)):this.generationTimeout=setTimeout((()=>this.startBranching()),50))}stopGeneration(){this.isGenerating=!1,this.generationTimeout&&(clearTimeout(this.generationTimeout),this.generationTimeout=null),this.stack=[],this.activeGrowthCount=0}generateNewMaze(){this.stopGeneration(),this.cols=parseInt(document.getElementById("cols").value),this.rows=parseInt(document.getElementById("rows").value),this.cellSize=this.canvas.width/this.cols,this.largeAreas=[{x:parseInt(document.getElementById("startX").value),y:parseInt(document.getElementById("startY").value),w:parseInt(document.getElementById("startW").value),h:parseInt(document.getElementById("startH").value),type:"start"},{x:parseInt(document.getElementById("checkpointX").value),y:parseInt(document.getElementById("checkpointY").value),w:parseInt(document.getElementById("checkpointW").value),h:parseInt(document.getElementById("checkpointH").value),type:"checkpoint"},{x:parseInt(document.getElementById("finishX").value),y:parseInt(document.getElementById("finishY").value),w:parseInt(document.getElementById("finishW").value),h:parseInt(document.getElementById("finishH").value),type:"finish"}],this.initialize(),this.isGenerating=!0,this.markBlockedAreas(),this.createMainPath(),this.draw(),this.generationTimeout=setTimeout((()=>this.startBranching()),1e3)}downloadMaze(){const e=document.createElement("canvas"),t=e.getContext("2d");e.width=4*this.canvas.width,e.height=4*this.canvas.height,t.fillStyle=i.colors.background,t.fillRect(0,0,e.width,e.height),t.scale(4,4),this.grid.forEach((e=>e.draw(t,this.cellSize)));const a=document.createElement("a");a.download="labirints.png",a.href=e.toDataURL("image/png"),a.click()}}class o{constructor(e){this.mazeGenerator=e,this.initializeEventListeners()}initializeEventListeners(){document.querySelectorAll(".neumorphic-tab").forEach((e=>{e.addEventListener("click",(()=>{this.handleTabClick(e)}))})),document.querySelectorAll(".neumorphic-btn").forEach((e=>{e.addEventListener("click",(()=>{this.handleButtonClick(e)}))})),document.getElementById("edgeChangeProb").addEventListener("input",(e=>{this.updateRangeValue("edgeChangeProbValue",e.target.value,"%")})),document.getElementById("changeProb").addEventListener("input",(e=>{this.updateRangeValue("changeProbValue",e.target.value,"%")})),document.getElementById("generationSpeed").addEventListener("input",(e=>{this.updateRangeValue("generationSpeedValue",e.target.value,"ms"),this.mazeGenerator.generationSpeed=parseInt(e.target.value)})),document.getElementById("generateBtn").addEventListener("click",(()=>{this.mazeGenerator.generateNewMaze()})),document.getElementById("downloadBtn").addEventListener("click",(()=>{this.mazeGenerator.downloadMaze()}))}handleTabClick(e){e.classList.add("animate-tab"),document.querySelectorAll(".neumorphic-tab").forEach((e=>{e.classList.remove("active"),e.classList.remove("bg-primary","text-white"),e.classList.add("text-gray-700")})),e.classList.add("active"),e.classList.remove("text-gray-700"),e.classList.add("bg-primary","text-white"),document.querySelectorAll('[id$="-tab"]').forEach((e=>{e.classList.add("hidden")}));const t=e.getAttribute("data-tab"),a=document.getElementById(`${t}-tab`);a&&(a.classList.remove("hidden"),a.style.opacity="0",a.style.transform="translateY(10px)",setTimeout((()=>{a.style.transition="all 0.3s ease",a.style.opacity="1",a.style.transform="translateY(0)"}),50)),setTimeout((()=>{e.classList.remove("animate-tab")}),300)}handleButtonClick(e){e.classList.add("animate-btn"),setTimeout((()=>{e.classList.remove("animate-btn")}),300)}updateRangeValue(e,t,a){const n=document.getElementById(e);n.textContent=`${t}${a}`,n.classList.add("animate-value"),setTimeout((()=>n.classList.remove("animate-value")),300)}}a(427),a(409),document.addEventListener("DOMContentLoaded",(()=>{const e=document.getElementById("maze"),t=new s(e);t.initialize(),new o(t),document.getElementById("cols").value=i.defaultCols,document.getElementById("rows").value=i.defaultRows,document.getElementById("generationSpeed").value=i.defaultSpeed,document.getElementById("generationSpeedValue").textContent=`${i.defaultSpeed}ms`,document.getElementById("startX").value=i.defaultStartArea.x,document.getElementById("startY").value=i.defaultStartArea.y,document.getElementById("startW").value=i.defaultStartArea.w,document.getElementById("startH").value=i.defaultStartArea.h,document.getElementById("checkpointX").value=i.defaultCheckpointArea.x,document.getElementById("checkpointY").value=i.defaultCheckpointArea.y,document.getElementById("checkpointW").value=i.defaultCheckpointArea.w,document.getElementById("checkpointH").value=i.defaultCheckpointArea.h,document.getElementById("finishX").value=i.defaultFinishArea.x,document.getElementById("finishY").value=i.defaultFinishArea.y,document.getElementById("finishW").value=i.defaultFinishArea.w,document.getElementById("finishH").value=i.defaultFinishArea.h,document.getElementById("minBranches").value=i.randomization.minBranches,document.getElementById("maxBranches").value=i.randomization.maxBranches,document.getElementById("minDistance").value=i.randomization.minDistance,document.getElementById("edgeChangeProb").value=i.randomization.edgeChangeProb,document.getElementById("changeProb").value=i.randomization.changeProb,document.getElementById("edgeChangeProbValue").textContent=`${i.randomization.edgeChangeProb}%`,document.getElementById("changeProbValue").textContent=`${i.randomization.changeProb}%`,t.generateNewMaze()}))}},e=>{e.O(0,[96,869],(()=>e(e.s=320))),e.O()}]);